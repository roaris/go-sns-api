swagger: '2.0'
info:
  title: go-sns-api
  description: ''
  contact:
    name: roaris
    url: 'https://github.com/roaris/go-sns-api'
  version: '1.0'
host: 'localhost:8080'
basePath: /api/v1
securityDefinitions:
  Authorization:
    name: Authorization
    type: apiKey
    in: header
paths:
  '/posts/{post_id}':
    get:
      summary: ''
      tags:
        - Post
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Post'
          examples: {}
        '404':
          description: Not Found
          schema:
            type: object
            properties: {}
      operationId: get-posts
      description: 投稿取得
      parameters: []
    parameters:
      - type: string
        name: post_id
        in: path
        required: true
    patch:
      summary: ''
      operationId: patch-posts-post_id
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          schema:
            type: object
            properties: {}
        '403':
          description: Forbidden
          schema:
            type: object
            properties: {}
        '404':
          description: Not Found
          schema:
            type: object
            properties: {}
      description: 投稿編集
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UpdatePostRequest'
      security:
        - Authorization: []
      tags:
        - Post
    delete:
      summary: ''
      operationId: delete-posts-post_id
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
          schema:
            type: object
            properties: {}
        '403':
          description: Forbidden
          schema:
            type: object
            properties: {}
        '404':
          description: Not Found
          schema:
            type: object
            properties: {}
      description: 投稿削除
      security:
        - Authorization: []
      tags:
        - Post
  /posts:
    post:
      summary: ''
      operationId: post-posts
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          schema:
            type: object
            properties: {}
      description: 投稿作成
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CreatePostRequest'
          description: ''
      tags:
        - Post
      security:
        - Authorization: []
    get:
      summary: ''
      operationId: get-timeline
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PostsAndUsers'
      description: タイムライン取得
      security:
        - Authorization: []
      tags:
        - Post
      parameters:
        - type: integer
          in: query
          name: limit
          required: true
        - type: integer
          in: query
          name: offset
          required: true
  /auth:
    post:
      summary: ''
      operationId: post-auth
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              token:
                type: string
        '400':
          description: Bad Request
          schema: {}
        '401':
          description: Unauthorized
          schema: {}
      description: ログイン JWTトークンを返す
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/AuthRequest'
          x-examples:
            example-1:
              email: strng
              password: string
          description: ''
      tags:
        - User
  /users:
    post:
      summary: ''
      operationId: post-users
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          schema: {}
        '409':
          description: Conflict
          schema: {}
      description: 新規登録
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CreateUserRequest'
          x-examples: {}
          description: ''
      tags:
        - User
  /users/me:
    get:
      summary: ''
      tags:
        - User
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties: {}
        '401':
          description: Unauthorized
          schema:
            type: object
            properties: {}
      operationId: get-users-me
      description: ログイン中のユーザー情報を取得する
      security:
        - Authorization: []
    patch:
      summary: ''
      operationId: patch-users-me
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized
          schema:
            type: object
            properties: {}
      description: ユーザー情報更新
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UpdateUserRequest'
      tags:
        - User
      security:
        - Authorization: []
  /users/me/followees:
    parameters: []
    post:
      summary: ''
      operationId: post-users-user_id-followees
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          schema:
            type: object
            properties: {}
        '409':
          description: Conflict
          schema:
            type: object
            properties: {}
      description: フォローする
      security:
        - Authorization: []
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CreateFolloweeRequest'
      tags:
        - Friendship
  '/users/me/followees/{user_id}':
    parameters:
      - type: string
        name: user_id
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-users-me-followees-user_id
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          schema:
            type: object
            properties: {}
      description: アンフォローする
      security:
        - Authorization: []
      tags:
        - Friendship
  '/users/{user_id}/followees':
    parameters:
      - type: string
        name: user_id
        in: path
        required: true
    get:
      summary: ''
      tags:
        - Friendship
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Followees'
        '404':
          description: Not Found
          schema:
            type: object
            properties: {}
      operationId: get-users-user_id-followees
      description: フォローしているユーザー一覧
  '/users/{user_id}/followers':
    parameters:
      - type: string
        name: user_id
        in: path
        required: true
    get:
      summary: ''
      tags:
        - Friendship
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Followers'
        '404':
          description: Not Found
          schema:
            type: object
            properties: {}
      operationId: get-users-user_id-followers
      description: フォローされているユーザー一覧
schemes:
  - http
definitions:
  Post:
    title: Post
    type: object
    properties:
      id:
        type: integer
      content:
        type: string
      user_id:
        type: integer
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
  User:
    title: User
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
  PostAndUser:
    title: PostAndUser
    type: object
    properties:
      post:
        $ref: '#/definitions/Post'
      user:
        $ref: '#/definitions/User'
  UpdateUserRequest:
    title: UpdateUserRequest
    type: object
    properties:
      name:
        type: string
        minLength: 3
      email:
        type: string
        format: email
      password:
        type: string
        minLength: 6
    required:
      - name
      - email
      - password
  CreateUserRequest:
    title: CreateUserRequest
    type: object
    properties:
      name:
        type: string
        minLength: 3
      email:
        type: string
        format: email
      password:
        type: string
        minLength: 6
    required:
      - name
      - email
      - password
  AuthRequest:
    title: AuthRequest
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  CreatePostRequest:
    title: CreatePostRequest
    type: object
    properties:
      content:
        type: string
        minLength: 1
        maxLength: 140
    required:
      - content
  UpdatePostRequest:
    title: UpdatePostRequest
    type: object
    properties:
      content:
        type: string
        minLength: 1
        maxLength: 140
    required:
      - content
  CreateFolloweeRequest:
    title: CreateFolloweeRequest
    type: object
    properties:
      followee_id:
        type: integer
  Followees:
    title: Followees
    type: object
    properties:
      followees:
        type: array
        items:
          $ref: '#/definitions/User'
  Followers:
    title: Followers
    type: object
    properties:
      followers:
        type: array
        items:
          $ref: '#/definitions/User'
  PostsAndUsers:
    title: PostsAndUsers
    type: object
    properties:
      posts_and_users:
        type: array
        items:
          $ref: '#/definitions/PostAndUser'
